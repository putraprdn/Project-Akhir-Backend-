swagger: "2.0"
info:
    description: "This is a SecondHand API documentation"
    version: "1.0.0"
    title: "SecondHand API"
# host: "pa-be-k3.herokuapp.co"
# basePath: "/api/"
tags:
    - name: "user"
schemes:
    - "https"
    - "http"
paths:
    # --- USER
    /api/user/login:
        post:
            tags:
                - "user"
            summary: "User login"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      required:
                          - "email"
                          - "password"
                      properties:
                          email:
                              type: "string"
                          password:
                              type: "string"
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/userSchema"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /api/user/whoami/{userToken}:
        get:
            tags:
                - "user"
            summary: "Get user info"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "userToken"
                  in: "path"
                  required: true
                  type: "string"
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/userSchema"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

            security:
                - bearerAuth: []
                
    /api/user/register:
        post:
            tags:
                - "user"
            summary: "User register"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "body"
                  in: "body"
                  description: "The email for register"
                  required: true
                  schema:
                      type: "object"
                      required:
                          - "name"
                          - "email"
                          - "password"
                      properties:
                          name:
                              type: "string"
                          email:
                              type: "string"
                          password:
                              type: "string"
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/userSchema"

                "400":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /api/user/update/{userToken}:
        put:
            tags:
                - "user"
            summary: "User update"
            description: ""
            consumes:
                - multipart/form-data
            parameters:
                - name: "userToken"
                  in: "path"
                  required: true
                  type: "string"
                - name: image
                  in: formData
                  type: file
                  required: true
                - name: name
                  in: formData
                  type: string
                  required: true
                - name: city
                  in: formData
                  type: string
                  required: true
                - name: address
                  in: formData
                  type: string
                  required: true
                - name: phoneNumber
                  in: formData
                  type: string
                  required: true
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/userSchema"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

            security:
                - bearerAuth: []

    /api/user/delete/{userToken}:
        delete:
            tags:
                - "user"
            summary: "User delete"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "userToken"
                  in: "path"
                  required: true
                  type: "string"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                    default: true
                                error:
                                    type: "integer"
                                    default: 0
                                message:
                                    type: "string"
                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

            security:
                - bearerAuth: []

    /user/auth/google:
        get:
            tags:
                - "user"
            summary: "Ini google auth-nya udh bisa tapi gatau cara konek ke swaggernya hehe. Lansung aja pake link yang ada di bawah"
            description: "[https://pa-be-k3.herokuapp.com/user/auth/google](https://pa-be-k3.herokuapp.com/user/auth/google) klo muncul error url mismatch coba lagi dibuka ulang linknya"
            produces:
                - "application/json"
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/userSchema"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /user/auth/facebook:
        get:
            tags:
                - "user"
            summary: "Ini juga sama lansung aja pake link yang ada di bawah"
            description: "[https://pa-be-k3.herokuapp.com/user/auth/facebook](https://pa-be-k3.herokuapp.com/user/auth/facebook) klo muncul error coba lagi dibuka ulang linknya"
            produces:
                - "application/json"
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/userSchema"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    # --- CATEGORY
    /api/category/list:
        get:
            tags:
                - "category"
            summary: "Get all categories"
            description: ""
            produces:
                - "application/json"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                error:
                                    type: "integer"
                                message:
                                    type: "string"
                                data:
                                    type: "array"
                                    items:
                                        type: "object"
                                        $ref: "#/definitions/categoryProps"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /api/category/create:
        post:
            tags:
                - "category"
            summary: "Create a category"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      required:
                          - "name"
                          - "description"
                      properties:
                          name:
                              type: "string"
                          description:
                              type: "string"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                error:
                                    type: "integer"
                                message:
                                    type: "string"
                                data:
                                    type: "object"
                                    $ref: "#/definitions/categoryProps"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /api/category/{categoryId}:
        get:
            tags:
                - "category"
            summary: "Get category by id"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "categoryId"
                  in: "path"
                  required: true
                  type: "integer"
                  format: "int64"
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/categorySchema"
                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /api/category/update/{categoryId}:
        put:
            tags:
                - "category"
            summary: "Category update"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "categoryId"
                  in: "path"
                  required: true
                  type: "integer"
                  format: "int64"
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      properties:
                          name:
                              type: "string"
                          description:
                              type: "string"
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/categorySchema"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /api/category/delete/{categoryId}:
        delete:
            tags:
                - "category"
            summary: "Category delete"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "categoryId"
                  in: "path"
                  required: true
                  type: "integer"
                  format: "int64"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                    default: true
                                error:
                                    type: "integer"
                                    default: 0
                                message:
                                    type: "string"
                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

            # Blm pake jwt
            # security:
            #     - bearerAuth: []

    # --- PRODUCT
    /api/product/list:
        get:
            tags:
                - "product"
            summary: "Get all products"
            description: ""
            produces:
                - "application/json"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                error:
                                    type: "integer"
                                message:
                                    type: "string"
                                data:
                                    type: "array"
                                    items:
                                        type: "object"
                                        $ref: "#/definitions/productProps"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /api/product/create:
        post:
            tags:
                - "product"
            summary: "Create a product (to upload multiple image files please use postman instead)"
            description: "this documentation only accept single file upload. To upload multiple files use postman"
            parameters:
                - name: image
                  in: formData
                  type: file
                  required: true
                - name: name
                  in: formData
                  type: string
                  required: true
                - name: description
                  in: formData
                  type: string
                  required: true
                - name: price
                  in: formData
                  type: integer
                  required: true
                - name: categoryId
                  in: formData
                  type: integer
                  required: true
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                error:
                                    type: "integer"
                                message:
                                    type: "string"
                                data:
                                    type: "object"
                                    $ref: "#/definitions/productProps"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

            security:
                - bearerAuth: []

    /api/product/{productId}:
        get:
            tags:
                - "product"
            summary: "Get product by id"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "productId"
                  in: "path"
                  required: true
                  type: "integer"
                  format: "int64"
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/productSchema"
                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /api/product/by-category/{categoryId}:
        get:
            tags:
                - "product"
            summary: "Get all products by category id"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "categoryId"
                  in: "path"
                  required: true
                  type: "integer"
                  format: "int64"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                error:
                                    type: "integer"
                                message:
                                    type: "string"
                                data:
                                    type: "array"
                                    items:
                                        type: "object"
                                        $ref: "#/definitions/productProps"
                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /api/product/name/{productName}:
        get:
            tags:
                - "product"
            summary: "Get a product by name"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "productName"
                  in: "path"
                  required: true
                  type: "string"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                error:
                                    type: "integer"
                                message:
                                    type: "string"
                                data:
                                    type: "array"
                                    items:
                                        type: "object"
                                        $ref: "#/definitions/productProps"
                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    # blm fix
    /api/product/update/{productId}:
        put:
            tags:
                - "product"
            summary: "!! Product update (tunggu request dari tim fe)"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "productId"
                  in: "path"
                  type: "integer"
                  format: "int64"
                - name: image
                  in: formData
                  type: file
                - name: name
                  in: formData
                  type: string
                - name: description
                  in: formData
                  type: string
                - name: price
                  in: formData
                  type: integer
                - name: categoryId
                  in: formData
                  type: integer
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/productSchema"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

            security:
                - bearerAuth: []

    # blm diupdate cascade-nya
    /api/product/delete/{productId}:
        delete:
            tags:
                - "product"
            summary: "!! Product delete (sementara blm bisa dipakai)"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "productId"
                  in: "path"
                  required: true
                  type: "integer"
                  format: "int64"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                    default: true
                                error:
                                    type: "integer"
                                    default: 0
                                message:
                                    type: "string"
                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

            security:
                - bearerAuth: []

    # --- OFFER
    /api/offer/list:
        get:
            tags:
                - "offer"
            summary: "Get all offers"
            description: ""
            produces:
                - "application/json"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                error:
                                    type: "integer"
                                message:
                                    type: "string"
                                data:
                                    type: "array"
                                    items:
                                        type: "object"
                                        $ref: "#/definitions/offerProps"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /api/offer/create/{productId}:
        post:
            tags:
                - "offer"
            summary: "Create an offer"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "productId"
                  in: "path"
                  required: true
                  type: "integer"
                  format: "int64"
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      required:
                          - "price"
                      properties:
                          price:
                              type: "integer"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                error:
                                    type: "integer"
                                message:
                                    type: "string"
                                data:
                                    type: "object"
                                    $ref: "#/definitions/offerProps"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

            security:
                - bearerAuth: []

    /api/offer/{offerId}:
        get:
            tags:
                - "offer"
            summary: "Get offer by id"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "offerId"
                  in: "path"
                  required: true
                  type: "integer"
                  format: "int64"
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/offerSchema"
                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /api/offer/update/{offerId}:
        put:
            tags:
                - "offer"
            summary: "Offer update"
            description: "Input only accept 0 or 1 [0: REJECTED, 1: ACCEPTED]"
            produces:
                - "application/json"
            parameters:
                - name: "offerId"
                  in: "path"
                  required: true
                  type: "integer"
                  format: "int64"
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      properties:
                          status:
                              type: "integer"
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/offerSchema"

                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

    /api/offer/user/{userToken}:
        get:
            tags:
                - "offer"
            summary: "Get all offers by user"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "userToken"
                  in: "path"
                  required: true
                  type: "string"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                error:
                                    type: "integer"
                                message:
                                    type: "string"
                                data:
                                    type: "array"
                                    items:
                                        type: "object"
                                        $ref: "#/definitions/offerProps"
                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

            security:
                - bearerAuth: []

    /api/offer/product/{productId}:
        get:
            tags:
                - "offer"
            summary: "Get all offers by product"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "productId"
                  in: "path"
                  required: true
                  type: "integer"
                  format: "int64"
            responses:
                "200":
                    description: "OK"
                    schema:
                        items:
                            type: "object"
                            properties:
                                success:
                                    type: "boolean"
                                error:
                                    type: "integer"
                                message:
                                    type: "string"
                                data:
                                    type: "array"
                                    items:
                                        type: "object"
                                        $ref: "#/definitions/offerProps"
                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"
    
    /api/offer/delete/{offerId}:
        delete:
            tags:
                - "offer"
            summary: "Delete an offer by id"
            description: ""
            produces:
                - "application/json"
            parameters:
                - name: "offerId"
                  in: "path"
                  required: true
                  type: "integer"
                  format: "int64"
            responses:
                "200":
                    description: "OK"
                    $ref: "#/definitions/offerSchema"
                "500":
                    description: "Server Error"
                    $ref: "#/definitions/errorSchema"

# Authorization
securityDefinitions:
    bearerAuth:
        name: Authorization # arbitrary name for the security scheme
        type: apiKey
        scheme: bearer
        in: header

definitions:
    userSchema:
        schema:
            items:
                type: "object"
                properties:
                    success:
                        type: "boolean"
                    error:
                        type: "integer"
                    message:
                        type: "string"
                    data:
                        type: "object"
                        properties:
                            id:
                                type: "integer"
                            name:
                                type: "string"
                            email:
                                type: "string"
                            city:
                                type: "string"
                            address:
                                type: "string"
                            phoneNumber:
                                type: "string"
                            image:
                                type: "string"
                            createdAt:
                                type: "string"
                                format: "date-time"
                            updatedAt:
                                type: "string"
                                format: "date-time"
                    token:
                        type: "string"
    categorySchema:
        schema:
            items:
                type: "object"
                properties:
                    success:
                        type: "boolean"
                    error:
                        type: "integer"
                    message:
                        type: "string"
                    data:
                        type: "object"
                        $ref: "#/definitions/categoryProps"
    categoryProps:
        properties:
            id:
                type: "integer"
            name:
                type: "string"
            description:
                type: "string"
            createdAt:
                type: "string"
                format: "date-time"
            updatedAt:
                type: "string"
                format: "date-time"
    productSchema:
        schema:
            items:
                type: "object"
                properties:
                    success:
                        type: "boolean"
                    error:
                        type: "integer"
                    message:
                        type: "string"
                    data:
                        type: "object"
                        $ref: "#/definitions/productProps"
    productProps:
        properties:
            id:
                type: "integer"
            name:
                type: "string"
            description:
                type: "string"
            price:
                type: "integer"
            categoryId:
                type: "integer"
            createdBy:
                type: "string"
            soldTo:
                type: "string"
            soldPrice:
                type: "integer"
            isSold:
                type: "boolean"
                default: false
            soldAt:
                type: "string"
                format: "date-time"
            isAvailable:
                type: "boolean"
                default: true
            createdAt:
                type: "string"
                format: "date-time"
            updatedAt:
                type: "string"
                format: "date-time"
            seller:
                type: "object"
                properties:
                    name:
                        type: "string"
                    email:
                        type: "string"
                    city:
                        type: "string"
                    address:
                        type: "string"
                    phoneNumber:
                        type: "string"
                    image:
                        type: "string"
            images:
                type: "array"
                items:
                    type: "object"
                    properties:
                        id:
                            type: "integer"
                        productId:
                            type: "integer"
                        image:
                            type: "string"
                        createdAt:
                            type: "string"
                            format: "date-time"
                        updatedAt:
                            type: "string"
                            format: "date-time"
    offerSchema:
        schema:
            items:
                type: "object"
                properties:
                    success:
                        type: "boolean"
                    error:
                        type: "integer"
                    message:
                        type: "string"
                    data:
                        type: "object"
                        $ref: "#/definitions/offerProps"
    offerProps:
        properties:
            id:
                type: "integer"
            productId:
                type: "integer"
            createdBy:
                type: "string"
            price:
                type: "integer"
            status:
                type: "string"
            createdAt:
                type: "string"
                format: "date-time"
            updatedAt:
                type: "string"
                format: "date-time"

    errorSchema:
        schema:
            items:
                type: "object"
                properties:
                    success:
                        type: "boolean"
                        default: false
                    error:
                        type: "object"
                        default: {}
                    message:
                        type: "string"
                    data:
                        type: "boolean"
                        default: null
